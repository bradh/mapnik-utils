<?xml version="1.0" encoding="utf-8"?>

<!--
zoom level  - scale denominator
1 279541132.014
2 139770566.007
3 69885283.0036
4 34942641.5018
5 17471320.7509
6 8735660.37545
7 4367830.18772
8 2183915.09386
9 1091957.54693
10 545978.773466
11 272989.386733
12 136494.693366
13 68247.3466832
14 34123.6733416
15 17061.8366708
16 8530.91833539
17 4265.4591677
18 2132.72958385
-->


<!DOCTYPE Map[
    <!ENTITY map_srs "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over">
    <!ENTITY coastlines "/home/project/o/s/m/osm/data/world_boundaries/processed_p">
    <!ENTITY coastlines_srs "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over">
    <!ENTITY osm_srs "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over">
    <!ENTITY contours_srs "+proj=latlong +datum=WGS84">    
    <!ENTITY host "sql-mapnik">
    <!ENTITY user "">
    <!ENTITY dbname "osm_mapnik">
<!--
    <!ENTITY estimate_extent "true">
    <!ENTITY extent ""> 
-->
    <!ENTITY estimate_extent "false">
    <!ENTITY extent "-20037508.34,-20037508.34,20037508.34,20037508.34">
<!--    <!ENTITY extent "1148357,6146222,1869795,6999934">-->
<!--     <!ENTITY extent "1448357,6446222,1669795,6799934"> -->
<!-- -20037508,-20037508,20037508,20037508 max extents for merc -->
<!--[Lon min, Lat min, Lon max, Lat max]--> 
<!--     <!ENTITY extent "12.8,50.65,15.3,51.5"> -->
]>
<Map srs="&map_srs;">
    <Stylesheet>
        Map { map-bgcolor: #cae5fb; }
    </Stylesheet>
    <Stylesheet src="ground.mss"/>
<!--     <Stylesheet src="contours.mss"/> -->
    <Stylesheet src="roads.mss"/>
    <Stylesheet src="paths.mss"/>
    <Stylesheet src="rail.mss"/>
    <Stylesheet src="peaks.mss"/>
    <Stylesheet src="poi.mss"/>
    <Stylesheet src="places.mss"/>
    <Stylesheet src="routes_dresdner_heide.mss"/>
    <Stylesheet src="routes_dresdner_heide2.mss"/>
    <Stylesheet src="routes.mss"/>

    <!--Settings for Mapnik Fonts
    Uncomment the unifont entries if you have that font installed
    in your mapnik fonts dir, and want to use it as a fallback font.
    Mapnik includes this font by default since r1328.
    To see the fonts you have installed with Mapnik do:
    ls `python -c "import mapnik;print mapnik.fontscollectionpath"`-->
    <FontSet name="book-fonts">
      <Font face_name="Droid Sans Regular" />
      <Font face_name="Droid Sans Japanese" />
      <Font face_name="Droid Sans Fallback" />
      <Font face_name="DejaVu Sans Book" />
      <Font face_name="unifont Medium" />
    </FontSet>
    <FontSet name="bold-fonts">
      <Font face_name="Droid Sans Bold" />
      <Font face_name="DejaVu Sans Bold" />
      <Font face_name="unifont Medium" />
    </FontSet>
    <FontSet name="oblique-fonts">
      <Font face_name="Droid Sans Italic" />
      <Font face_name="DejaVu Sans Oblique" />
      <Font face_name="unifont Medium" />
    </FontSet>


    <!-- coastline shapefiles can be found at http://hypercube.telascience.org/~kleptog/ -->
    <Layer class="coast edge outer" srs="&coastlines_srs;">
        <Datasource>
            <Parameter name="type">shape</Parameter>
            <Parameter name="file">&coastlines;</Parameter>
        </Datasource>
    </Layer>
    <Layer class="coast edge inner" srs="&coastlines_srs;">
        <Datasource>
            <Parameter name="type">shape</Parameter>
            <Parameter name="file">&coastlines;</Parameter>
        </Datasource>
    </Layer>
    <Layer class="coast fill" srs="&coastlines_srs;">
        <Datasource>
            <Parameter name="type">shape</Parameter>
            <Parameter name="file">&coastlines;</Parameter>
        </Datasource>
    </Layer>

    <Layer class="citylike nonparking area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 building, tourism, landuse, aeroway
                 from planet_polygon
                 where building is null
                   and (amenity in ('hospital', 'police', 'fire_station')
                        or tourism in ('museum')
                        or landuse in ('residential', 'industrial', 'commercial')
                        or aeroway in ('apron'))
                 order by z_order asc, way_area desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="parklike area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 building, amenity, landuse, "natural", leisure,
                 (case
                         when round(way_area * 1000000) >= 20 then 'large'
                         when round(way_area * 1000000) >= 1 then 'medium'
                         else 'small' end) as size
                 from planet_polygon
                 where building is null
                       and (amenity in ('park')
                        or landuse in ('recreation_ground', 'greenfield', 'meadow', 'grass', 'village_green', 'cemetery', 'forest', 'allotments', 'farm', 'farmland', 'quarry', 'vineyard')
                        or "natural" in ('wood', 'grass', 'wetland', 'beach', 'scrub')
                        or leisure in ('park', 'pitch', 'track', 'golf_course', 'common', 'playground', 'garden', 'plaza'))
                 order by z_order asc, way_area desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="citylike parking area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 building, landuse, amenity,
                 tags->'fee' as fee
                 from planet_polygon
                 where building is null
                   and amenity = 'parking'
                 order by z_order asc, way_area desc
                ) AS foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="cliff line" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 "natural", man_made 
                 from planet_line
                 where "natural" = 'cliff'
                    or man_made in ('embankment', 'cutting')
                 ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="cliff area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 "natural", man_made 
                 from planet_polygon
                 where "natural" = 'cliff'
                    or man_made in ('embankment', 'cutting')
                 ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="water area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 landuse, "natural", waterway
                 from planet_polygon
                 where landuse in ('reservoir', 'water')
                    or "natural" in ('lake', 'water', 'land')
                    or waterway in ('canal', 'riverbank', 'river')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="water line" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way,
                 waterway, name 
                 from planet_line
                 where waterway in ('river', 'stream', 'canal', 'drain')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="water ferry" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route 
                 from planet_line
                 where route in ('ferry') order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="road area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, tunnel, bridge, oneway,
                 tags->'lanes' as lanes
                 from planet_polygon
                 where highway in ('pedestrian', 'living_street', 'residential', 'unclassified', 'service', 'minor', 'road', 'tertiary', 'secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="road texture" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, tunnel, bridge, oneway,
                 tags->'lanes' as lanes,
                    (case when highway in ('motorway', 'motorway_link') then 0
                          when highway in ('trunk', 'trunk_link', 'primary', 'primary_link') then 1
                          when highway in ('secondary', 'secondary_link') then 2
                          when highway = 'tertiary' then 3
                          else 4 end) as priority,
                        (case when highway in ('secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link') then 'major'
                              else 'minor' end) as prominence
                 from planet_line
                 where highway in ('pedestrian', 'living_street', 'residential', 'unclassified', 'service', 'minor', 'road', 'tertiary', 'secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                 order by z_order asc, priority desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="path outline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way, highway, 
                 tags->'bicycle' as bicycle, 
                 tags->'horse' as horse, 
                 tags->'foot' as foot, 
                 tags->'tracktype' as tracktype, 
                 tags->'path' as path,
                 name, ref
                 from planet_line
                 where highway in ('track', 'footway', 'steps', 'bridleway', 'path', 'cycleway') 
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="road outline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, tunnel, bridge, oneway,
                 tags->'lanes' as lanes,
                    (CASE WHEN highway IN ('motorway', 'motorway_link') THEN 0
                          WHEN highway IN ('trunk', 'trunk_link', 'primary', 'primary_link') THEN 1
                          WHEN highway IN ('secondary', 'secondary_link') THEN 2
                          WHEN highway = 'tertiary' THEN 3
                          ELSE 4 END) AS priority,
                        (CASE WHEN highway IN ('secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link') THEN 'major'
                              ELSE 'minor' END) AS prominence
                 FROM planet_line
                 WHERE highway IN ('pedestrian', 'living_street', 'residential', 'unclassified', 'service', 'minor', 'road', 'tertiary', 'secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                 ORDER BY z_order ASC, priority DESC)
                 AS foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="path inline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way, highway, 
                 tags->'bicycle' as bicycle, 
                 tags->'horse' as horse, 
                 tags->'foot' as foot, 
                 tags->'tracktype' as tracktype, 
                 tags->'path' as path,
                 name, ref
                 from planet_line
                 where highway in ('track', 'footway', 'steps', 'bridleway', 'path', 'cycleway') 
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="road inline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, tunnel, bridge, oneway,
                 tags->'lanes' as lanes,
                        (CASE WHEN highway IN ('motorway', 'motorway_link') THEN 0
                              WHEN highway IN ('trunk', 'trunk_link', 'primary', 'primary_link') THEN 1
                              WHEN highway IN ('secondary', 'secondary_link') THEN 2
                              WHEN highway = 'tertiary' THEN 3
                              ELSE 4 END) AS priority,
                        (CASE WHEN highway IN ('secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link') THEN 'major'
                              ELSE 'minor' END) AS prominence
                 FROM planet_line
                 WHERE highway IN ('pedestrian', 'living_street', 'residential', 'unclassified', 'service', 'minor', 'road', 'tertiary', 'secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                 ORDER BY z_order ASC, priority DESC)
                 AS foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="road centerline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, tunnel, bridge, oneway,
                 tags->'lanes' as lanes,
                        (CASE WHEN highway IN ('motorway', 'motorway_link') THEN 0
                              WHEN highway IN ('trunk', 'trunk_link', 'primary', 'primary_link') THEN 1
                              WHEN highway IN ('secondary', 'secondary_link') THEN 2
                              WHEN highway = 'tertiary' THEN 3
                              ELSE 4 END) AS priority,
                        (CASE WHEN highway IN ('secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link') THEN 'major'
                              ELSE 'minor' END) AS prominence
                 FROM planet_line
                 WHERE highway IN ('pedestrian', 'living_street', 'residential', 'unclassified', 'service', 'minor', 'road', 'tertiary', 'secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                 ORDER BY z_order ASC, priority DESC)

                 AS foo]]></Parameter>
        </Datasource>
    </Layer>

    <!-- motorways here are repeated, so that they may be overlaid cleanly at low zoom levels and provide a centerline at high zoom levels. -->
    <Layer class="motorway outline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway 
                 from planet_line
	         where highway in ('motorway', 'trunk', 'trunk_link')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="motorway inline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway 
                 from planet_line
	         where highway in ('motorway', 'trunk', 'trunk_link')
	        ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="rail bridge" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 railway, tunnel, bridge, disused, tags->'abandoned' as abandoned 
                 from planet_line
	         where railway in ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail', 'narrow_gauge')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="rail outline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 railway, tunnel, bridge, disused, tags->'abandoned' as abandoned 
                 from planet_line
	         where railway in ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail', 'narrow_gauge')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="rail centerline" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 railway, tunnel, bridge, disused, tags->'abandoned' as abandoned 
                 from planet_line
	         where railway in ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail', 'narrow_gauge')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="rail line" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 railway, tunnel, bridge, disused, tags->'abandoned' as abandoned 
                 from planet_line
	         where railway in ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail', 'narrow_gauge')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="power line" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way, 
                 power
                 from planet_line
	         where power in ('line')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="barrier" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way, 
                 barrier
                 from planet_line
	         where barrier is not null
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="path closed" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way, highway,
                 tags->'path' as path,
                 name, ref,
                 access
                 from planet_line
                 where access in ('no', 'private')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="boundary line" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way,
                 boundary, admin_level 
                 from planet_line
	         where boundary='administrative'
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="boundary area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way,
                 boundary, admin_level 
                 from planet_polygon
	         where boundary='administrative'
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="boundary forest" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way,
                 boundary, ref 
                 from planet_line
	         where boundary='forest'
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="building area" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way,
                 building
                 from planet_polygon
                 where building is not null
                 order by z_order asc, way_area desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <!-- FIXME! -->
    <Layer class="place label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
	        (select way,
                 place, name,
	         coalesce(z_order, 0) as correct_z_order,
	         (case when place = 'city' then 0
                       when place = 'town' then 1
                       when place = 'village' then 2
                       else 3 end) as priority from planet_point
                 where place in ('city', 'town', 'village', 'suburb', 'hamlet', 'locality')
                 order by priority asc, correct_z_order desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking_small" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking_heide" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking_heide_a_h" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking_heide_k_n" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking_heide_o_s" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="route hiking_heide_t_z" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name,
                 tags->'osmc:symbol' as "osmc:symbol", 
                 tags->'route_name' as route_name,
                 case when route is not null then ' ' end as empty 
                 from planet_line
                 where route in ('hiking', 'foot')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
 
    <Layer class="peak point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
               (select way, "natural", name, ele, 
                  (case when tags->'importance' ~ e'^-?[[:digit:]]+(\.[[:digit:]]+)?$' then 
                   cast (tags->'importance' as float) else 0 end)
                  as importance_real
                  from planet_point
                  where "natural" in ('peak') order by importance_real desc)
                  as foo]]></Parameter>
        </Datasource>
    </Layer>

<!--
            <Parameter name="table"><![CDATA[
                (SELECT ST_Collect(way) AS way,
                        highway,
                        railway,
                        (CASE WHEN layer ~ E'^-?[[:digit:]]+(\.[[:digit:]]+)?$' THEN CAST (layer AS FLOAT)
                              ELSE 0
                              END) AS coalesced_layer,
                        (CASE WHEN highway IN ('motorway', 'motorway_link') THEN 0
                              WHEN highway IN ('footpath', 'track', 'footway', 'steps', 'pedestrian', 'path', 'cycleway') THEN 1
                              WHEN railway IN ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail') THEN 2
                              WHEN highway IN ('trunk', 'trunk_link', 'primary', 'primary_link') THEN 3
                              WHEN highway = 'secondary' THEN 4
                              WHEN highway = 'tertiary' THEN 5
                              ELSE 9 END) AS priority,
                        (CASE WHEN highway IN ('secondary', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link') THEN 'major_road'
                              WHEN highway IN ('residential', 'unclassified', 'service', 'minor', 'road', 'tertiary') THEN 'minor_road'
                              WHEN railway IN ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail') THEN 'rail'
                              WHEN highway IN ('footpath', 'track', 'footway', 'steps', 'pedestrian', 'path', 'cycleway') THEN 'path'
                              ELSE '' END) AS kind,
                        (CASE WHEN tunnel IN ('yes', 'true') THEN 'yes'
                              ELSE 'no' END) AS is_tunnel,
                        (CASE WHEN bridge IN ('yes', 'true') THEN 'yes'
                              ELSE 'no' END) AS is_bridge

                 FROM (SELECT * FROM planet_line WHERE ST_Intersects(way, !BBOX!)) AS bounded_lines

                 WHERE railway IN ('rail', 'spur', 'subway', 'light_rail', 'tram', 'abandoned', 'disused', 'monorail')
                    OR highway IN ('secondary', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                    OR highway IN ('residential', 'unclassified', 'service', 'minor', 'road', 'tertiary')
                    OR highway IN ('footpath', 'track', 'footway', 'steps', 'pedestrian', 'path', 'cycleway')

                 GROUP BY highway, railway, coalesced_layer, priority, kind, is_tunnel, is_bridge
                 ORDER BY coalesced_layer ASC, priority DESC)
                 
                 AS foo]]></Parameter>
-->

<!--
(SELECT "natural", name, (CASE WHEN importance ~ E'^-?[[:digit:]]+(\.[[:digit:]]+)?$' THEN CAST (importance AS FLOAT) ELSE 0 END) AS importance_real FROM planet_point WHERE "natural" IN ('peak') ORDER BY importance_real DESC);
-->

<!--
 (SELECT "natural", name, importance FROM planet_point WHERE "natural" IN ('peak') AND importance SIMILAR TO '^-*[0-5].[0-9]$' ORDER BY importance DESC);
-->

    <!-- POIs -->
    <Layer class="poi_natural point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 "natural", name
                 from planet_point
                 where "natural" in ('tree')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="poi_tourism point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 tourism, man_made, name,
                 tags->'information' as information
                 from planet_point
                 where tourism in ('viewpoint', 'information', 'picnic_site', 'summit_cross', 'camp_site', 'alpine_hut')
                 or man_made in ('tower')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="poi_historic point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 historic, name
                 from planet_point
                 where historic in ('ruins', 'castle', 'wayside_cross')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="poi_natural point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 "natural", name
                 from planet_point
                 where "natural" in ('cave_entrance')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="poi_boundary point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 boundary, ref
                 from planet_point
                 where boundary in ('marker')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="poi_shop point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 shop, name
                 from planet_point
                 where shop in ('bicycle')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="poi point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 amenity, man_made, military, name,
                 case when (tags->'fee' in ('no','false','0') and tags ? 'fee') then 'no'::text else 'yes'::text end as fee
                 from planet_point
                 where amenity in ('bench', 'toilets', 'shelter', 'telephone', 'parking', 'guidepost', 'signpost', 'rescue_box', 'hunting_stand')
                 or man_made in ('mineshaft', 'mast')
                 or military in ('bunker')
                 or amenity in ('restaurant', 'fast_food', 'pub', 'drinking_water')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <Layer class="power point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 power
                 from planet_point
                 where power in ('tower')
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

    <!-- all labels go below -->
    <Layer class="transit point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 railway, aeroway, name,
                 y(astext(way)) as latitude from planet_point
                 where (railway in ('station', 'subway_entrance')
                 or aeroway in ('aerodrome', 'airport'))
                 and name is not null
                 order by z_order asc, latitude desc
                ) AS foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="road point" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 railway, aeroway, highway, barrier, name 
                 from planet_point
                 where (railway in ('station', 'subway_entrance', 'halt', 'tram_stop')
                 or aeroway in ('aerodrome', 'airport')
                 or highway in ('gate', 'bus_stop')
                 or barrier in ('gate', 'bollard'))
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="road label major" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, name, ref, oneway,
                 tags->'lanes' as lanes,
                 length(way) as length, char_length(ref) as ref_length,
                 (case when char_length(ref) between 2 and 9 then ref
                       else null end) as ref_content,
                      (case when highway in ('motorway', 'motorway_link') then 0
                            when highway in ('trunk', 'trunk_link', 'primary', 'primary_link') then 1
                            when highway in ('secondary', 'secondary_link') then 2
                            when highway = 'tertiary' then 3
                            else 4 end) as priority
                  from planet_line
                  where highway in ('secondary', 'secondary_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'motorway', 'motorway_link')
                  order by priority asc, z_order asc, length desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="parklike label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 building, amenity, landuse, "natural", leisure, name, ref,
                 (case when round(way_area * 1000000) >= 20 then 'large'
                       when round(way_area * 1000000) >= 1 then 'medium'
                       else 'small' end) as size,
                       regexp_replace(upper(name), '(.)', e'\\1\xc2\xa0\xc2\xa0', 'g') as name_stretched
                  from planet_polygon
                  where building is null
                  and (amenity in ('park')
                       or landuse in ('recreation_ground', 'greenfield', 'cemetery', 'forest', 'allotments', 'farm', 'farmland', 'quarry', 'vineyard')
                       or "natural" in ('wood', 'grass', 'wetland', 'beach', 'scrub')
                       or leisure in ('park', 'pitch', 'track', 'golf_course', 'common', 'playground', 'garden', 'plaza')
                      ) order by z_order asc, way_area desc
                 ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="citylike label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 building, amenity, tourism, landuse, aeroway, name, ref,
                 tags->'fee' as fee,
                 (case when round(way_area * 1000000) >= 20 then 'large'
                       when round(way_area * 1000000) >= 1 then 'medium'
                       else 'small' end) as size,
                       regexp_replace(upper(name), '(.)', e'\\1\xc2\xa0\xc2\xa0', 'g') as name_stretched
                 from planet_polygon
                 where building is null
                 and (amenity in ('parking', 'hospital', 'police', 'fire_station')
                      or tourism in ('museum')
                      or landuse in ('residential', 'industrial', 'commercial')
                      or aeroway in ('apron')
                     ) order by z_order asc, way_area desc
                ) AS foo]]></Parameter>
        </Datasource>
    </Layer>
<!--
    <Layer class="srtm label" srs="&contours_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (SELECT way,height FROM contours WHERE
                 height::integer % 10 = 0 OR
                 height::integer % 50 = 0 OR
                 height::integer % 100 = 0) AS foo]]></Parameter>
        </Datasource>
    </Layer>
-->
    <Layer class="road label minor" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 highway, name, ref, oneway,
                 tags->'lanes' as lanes,
                 length(way) as length, 
                 (case when highway in ('motorway', 'motorway_link') then 0 
                       when highway in ('trunk', 'trunk_link', 'primary', 'primary_link') then 1 
                       when highway in ('secondary', 'secondary_link') then 2 
                       when highway = 'tertiary' then 3 
                       else 4 end
                 ) as priority from planet_line 
                 where highway in ('pedestrian', 'living_street', 'residential', 'unclassified', 'service', 'minor', 'road', 'tertiary') 
                 order by priority asc, z_order asc, length desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="path label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way, highway, 
                 tags->'bicycle' as bicycle, 
                 tags->'horse' as horse, 
                 tags->'foot' as foot, 
                 tags->'tracktype' as tracktype, 
                 tags->'path' as path,
                 name, ref
                 from planet_line
                 where highway in ('track', 'footway', 'steps', 'bridleway', 'path', 'cycleway') 
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="water label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 landuse, "natural", name,
                 (case when way_area >= 200000 then 'large'
                       when way_area >=  50000  then 'medium'
                       else 'small' end) as size,
                       regexp_replace(upper(name), '(.)', e'\\1\xc2\xa0\xc2\xa0', 'g') as name_stretched
                 from planet_polygon
                 where landuse in ('reservoir', 'water')
                 or "natural" in ('lake', 'water', 'land')
                 order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="ferry label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 route, name, ref 
                 from planet_line 
	         where route in ('ferry') 
	         order by z_order asc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>
    <Layer class="building label" srs="&osm_srs;">
        <Datasource>
            <Parameter name="type">postgis</Parameter>
            <Parameter name="host">&host;</Parameter>
            <Parameter name="dbname">&dbname;</Parameter>
            <Parameter name="user">&user;</Parameter>
            <Parameter name="estimate_extent">&estimate_extent;</Parameter>
            <Parameter name="extent">&extent;</Parameter>
            <Parameter name="table"><![CDATA[
                (select way,
                 building, amenity, tourism, name, ref,
                 (case when round(way_area * 1000000) >= 20 then 'large'
                       when round(way_area * 1000000) >= 1 then 'medium'
                       else 'small' end
                 ) as size,
                 regexp_replace(upper(name), '(.)', e'\\1\xc2\xa0\xc2\xa0', 'g') as name_stretched
                 from planet_polygon
                 where building is not null
                 order by z_order asc, way_area desc
                ) as foo]]></Parameter>
        </Datasource>
    </Layer>

<!--
    <Style name="raster">
      <Rule>
	<RasterSymbolizer>
          <CssParameter name="opacity">1.0</CssParameter>
          <CssParameter name="scaling">bilinear</CssParameter>
          <CssParameter name="mode">grain_merge</CssParameter>
	</RasterSymbolizer>
      </Rule>
    </Style>
-->
</Map>
